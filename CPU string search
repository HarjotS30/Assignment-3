#include <iostream>
#include <vector>
#include <string>
#include <omp.h>
#include <chrono>

// Function to perform the Boyer-Moore search on a substring of the text
// between indices [startIdx, endIdx).
int boyerMooreSearchCPU(const std::string &text, const std::string &pattern, int startIdx, int endIdx) {
    int textLength = endIdx - startIdx;
    int patternLength = pattern.size();
    int badChar[256] = {-1};

// Initialize the bad character table to -1.
    for (int i = 0; i < 256; ++i) badChar[i] = -1;
// Fill the bad character table with the last occurrence index of each character in the pattern.
    for (int i = 0; i < patternLength; ++i) badChar[pattern[i]] = i;

// Start position of the current search window in the text segment.
    int i = 0; 

// Search loop to match the pattern within the text segment.
    while (i <= textLength - patternLength) {
        int j = patternLength - 1; // Start comparing from the end of the pattern.

// Match characters from the end of the pattern to the beginning.
        while (j >= 0 && pattern[j] == text[startIdx + i + j]) {
            j--;
        }

// If the entire pattern matches, return the starting position.
        if (j < 0) {
            return startIdx + i;
        }
